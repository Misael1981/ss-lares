generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String? // ✨ ADICIONAR ESTA LINHA!
  password      String?
  phone         String?   @unique
  phoneVerified DateTime?
  address       String?
  orders        Order[]
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  type        String   @default("outros")
  price       Float
  salePrice   Float?
  brand       String?
  tags        String[]
  colors      String[]
  imageUrl    String[]

  // Dimensões do produto individual
  height Float? // altura do produto em cm
  width  Float? // largura do produto em cm  
  length Float? // comprimento do produto em cm
  weight Float? // peso do produto individual em kg

  // relações
  packaging     PackagingVariant[]
  orderProducts OrderProduct[]

  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PackagingVariant {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantityPerPackage Int? // Ex.: 50, 100, 200
  packagePerBox  Int?
  unitLabel      String? // "peças", "caixas"
  barcodeBox     String?
  boxHeight      Float? // cm
  boxWidth       Float?
  boxLength      Float?
  boxWeight      Float? // kg

  // preços e impostos que podem mudar conforme a caixa
  price            Float
  salePrice        Float?
  costWithoutTaxes Float?
  ipi              Float?
  st               Float?
  icms             Float?
}

model Order {
  id           String         @id @default(uuid())
  userId       String
  total        Float
  status       String         @default("PENDING")
  dateOrdered  DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  orderProduct OrderProduct[]
}

model OrderProduct {
  id        String   @id @default(uuid())
  productId String
  orderId   String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CarouselBanner {
  id           String   @id @default(uuid())
  imageUrl     String?
  imageMobile  String?
  imageTablet  String?
  imageLaptop  String?
  imageDesktop String?
  title        String?
  description  String?
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Catalog {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String
  fileName    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CompanyInfo {
  id        Int      @id @default(autoincrement())
  name      String   @default("SS Lares")
  email     String
  phones    Phone[]
  address   Address?
  social    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Phone {
  id          Int         @id @default(autoincrement())
  label       String
  contactName String?
  number      String
  companyId   Int
  company     CompanyInfo @relation(fields: [companyId], references: [id])
}

model Address {
  id           Int         @id @default(autoincrement())
  street       String
  number       String
  city         String
  neighborhood String?
  state        String
  zipCode      String?
  companyId    Int         @unique
  company      CompanyInfo @relation(fields: [companyId], references: [id])
}
